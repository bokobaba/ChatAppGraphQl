// <auto-generated />
using System;
using ChatAppGraphQl.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatAppGraphQl.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221223201330_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatAppGraphQl.Model.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplyToId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReplyToId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("BannerImage")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.CommunitySubscription", b =>
                {
                    b.Property<string>("SubscriberId")
                        .HasColumnType("text");

                    b.Property<string>("CommunityName")
                        .HasColumnType("text");

                    b.HasKey("SubscriberId", "CommunityName");

                    b.HasIndex("CommunityName");

                    b.ToTable("CommunitySubscriptions");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommunityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityName");

                    b.HasIndex("CreatorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.UserLikePost", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserLikePosts");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.Comment", b =>
                {
                    b.HasOne("ChatAppGraphQl.Model.User", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .HasPrincipalKey("FirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAppGraphQl.Model.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAppGraphQl.Model.Comment", "ReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId");

                    b.Navigation("Creator");

                    b.Navigation("Post");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.CommunitySubscription", b =>
                {
                    b.HasOne("ChatAppGraphQl.Model.Community", "Community")
                        .WithMany("Subscribers")
                        .HasForeignKey("CommunityName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAppGraphQl.Model.User", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .HasPrincipalKey("FirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.Post", b =>
                {
                    b.HasOne("ChatAppGraphQl.Model.Community", "Community")
                        .WithMany("Posts")
                        .HasForeignKey("CommunityName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAppGraphQl.Model.User", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorId")
                        .HasPrincipalKey("FirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.UserLikePost", b =>
                {
                    b.HasOne("ChatAppGraphQl.Model.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAppGraphQl.Model.User", "User")
                        .WithMany("LikedPosts")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("FirebaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.Community", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ChatAppGraphQl.Model.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikedPosts");

                    b.Navigation("Posts");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
